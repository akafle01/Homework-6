import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the CIFAR-10 dataset
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
train_images, test_images = train_images / 255.0, test_images / 255.0

# Build the Fully Connected Neural Network with two additional hidden layers
model_extended = Sequential()
model_extended.add(Flatten(input_shape=(32, 32, 3)))  # Flatten the 32x32x3 image to a vector
model_extended.add(Dense(512, activation='relu'))  # Hidden layer with 512 units
model_extended.add(Dense(256, activation='relu'))  # Additional hidden layer with 256 units
model_extended.add(Dense(128, activation='relu'))  # Additional hidden layer with 128 units
model_extended.add(Dense(64, activation='relu'))   # Additional hidden layer with 64 units
model_extended.add(Dense(10, activation='softmax'))  # Output layer with 10 units for the 10 classes

# Compile the extended model
model_extended.compile(optimizer='adam',
                       loss='sparse_categorical_crossentropy',
                       metrics=['accuracy'])

# Train the extended model
import time
start_time_extended = time.time()

history_extended = model_extended.fit(train_images, train_labels, epochs=300, validation_data=(test_images, test_labels))

training_time_extended = time.time() - start_time_extended

# Evaluate the extended model on the test set
test_loss_extended, test_acc_extended = model_extended.evaluate(test_images, test_labels)

# Print results for the extended model
print(f'\nExtended Model Results:')
print(f'Training Time: {training_time_extended} seconds')
print(f'Training Loss: {history_extended.history["loss"][-1]}')
print(f'Test Accuracy: {test_acc_extended}')
